openapi: "3.0.0"
info:
  title: FindNUS_api
  description: API documentation for FindNUS backend services. Handles the retrieval, processing and management of Lost Items found in NUS.
  version: "0.1-280522"
servers:
  - url: https://findnus.herokuapp.com
    description: Heroku domain that hosts the backend services for FindNUS
  - url: https://uat-findnus.herokuapp.com
    description: Integration environment for User acceptance testing.

paths:
# These set of paths define debugging endpoints
  /debug/ping:
    get:
      description: |
        Returns a Hello World equivalent message. Shows that the backend connection works.
      responses:
        '200':
          description: A hello world message.
          content:
            text/plain:
              schema:
                type: string
                example: | 
                  message: Hi there, you have reached FindNUS!
  /debug/checkAuth:
    get:
      description: |
        Check with backend if the Firebase token is valid.
      parameters:
      - in: header
        name: Authorization
        description: Firebase ID token of user 
        required: true
        schema:
          type: string
          example: "Authorization: my-firebase-idToken"
      responses:
        '200':
          description: Id token is valid
        '401':
          description: Id token is invalid
  /debug/getDemoItem:
    get:
      description: |
        Get a demo item for Milestone 1. 
      parameters:
      - in: query
        name: name
        description: Name of the demoset item to be retrieved 
        required: true
        schema:
          type: string
        allowReserved: true
      responses:
        '200':
          description: Get request is valid, item is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Get request is valid, item not found
          content:
            text/plain:
              schema:
                type: string
                example: | 
                  Nothing Found!
# These set of paths define Creation, Update and Delete item operations   
  /item:
    post:
      description: |
        Add new Lost item to be put on Lookout on the database.
      parameters:
      - in: header
        name: Authorization
        description: Firebase ID token of user 
        required: true
        schema:
          type: string
          example: "Authorization: my-firebase-idToken"
      requestBody:
        description: Callback item payload
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewItem"
      responses:
        '200':
          description: Item registered into database
        '400':
          description: Rejected new item into database
        '401':
          description: Firebase credentials not invalid
  # /item:
    patch:
      description: |
        Update details of an item on the database.
      parameters:
      - in: header
        name: Authorization
        description: Firebase ID token of user 
        required: true
        schema:
          type: string
          example: "Authorization: my-firebase-idToken"
      - in: query
        name: Id
        description: MongoDB ID of the Item
        required: true
        schema:
          type: string
          example: "Id=629cc52563533a84f60c4c68"
      - in: query
        name: User_id
        description: |
          FindNUS User Id (for lost item lookout requests). Include this to remove from Lost (Lookout) Items collection.
        required: true
        schema:
          type: string
          example: "User_id=196afas7"
      requestBody:
        description: Callback item payload
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PatchItem"
      responses:
        '200': 
          description: OK
        '401': 
          description: Firebase credentials not invalid
  # /item:
    get:
      description: |
        Get a particular item's full details
      parameters:
        - name: Id
          in: query
          required: true
          description: Item Id reference. Case sensitive.
          schema:
            type: string
            format: string
            minimum: 1
        - name: User_id
          in: query
          description: User_id filter to search for this Id in the LOST collection. Case sensitive.
          schema:
            type: string
            format: string
            minimum: 1
      responses:
        '200':
          description: A Lost Item's details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
  # /item:
    delete:
      description: |
        Remove an item listing on the database.
      parameters:
        - in: header
          name: Authorization
          description: Firebase ID token of user 
          required: true
          schema:
            type: string
            example: "Authorization: my-firebase-idToken"
        - in: query
          name: Id
          description: MongoDB ID of the Item
          required: true
          schema:
            type: string
            example: "Id=629cc52563533a84f60c4c68"
        - in: query
          name: User_id
          description: |
            FindNUS User_Id (for lost item lookout requests). 
            Include this to remove from Lost (Lookout) Items collection. 
            Case sensitive.
          required: false
          schema:
            type: string
            example: "User_id=196afas7"
      requestBody:
        description: Callback item payload
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/DeleteItem"
      responses:
        '200':
          description: Item successfully removed from database
        '410':
          description: Item does not exist in the database
        '401':
          description: Firebase credentials not invalid  
  /item/peek:
    get:
      description: |
        Get a list of lost items that can be sorted.
        Peek at the database's latest finds, paginated.
        (Adding queries for sorting and filtering to be implemented in the future)
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: Number of items to skip (Case sensitive)
          example: offset=10
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items to return (Case sensitive)
          example: limit=5
        - in: query
          name: category
          schema:
            type: string
          description: |
            Types of category to filter by.
            Chain multiple category values to filter by the
            For example, category=Cards&category=Etc will include results from both Cards and Etc. 
          example: category=Etc
      responses:
        '200':
          description: Returns an array of lost items that may be filtered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MiniItem'
# These set of paths define querying with a text-based search
  /search:
    get:
      description: |
        Text-based search for an item.
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: |
            Number of items to skip
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items returned per search
        - in: query
          name: query
          schema:
            type: string
          description: Query string to be searched against the database
      responses:
        '501':
          description: Function not added yet.
                    
components:
  schemas:
    Item:
      type: object
      description: |
        An Item's schema containing ALL the Lost/Found item's details.
      required:
      - Id
      - Name
      - Date
      - Location
      - Category
      properties:
        Id: 
          type: string
          format: string
          description: The MongoDB ObjectID associated to this Item
          example: 98721yrr0u14oure
        Name:
          type: string
          description: Name of lost/found item
          example: Water Bottle
        Date:
          type: string
          description: Date-time where item is lost/found
          format: date-time
        Location:
          type: string
          description: Where the item was found
          example: E4A DSA Lab
        Category:
          $ref: "#/components/schemas/Category"
          description: Type of item
          example: Cards
        Contact_method:
          $ref: "#/components/schemas/ContactMethod"
          description: Founder/Lostee Contact Method
          example: Telegram
        Contact_details:
          type: string
          description: Contact details of Founder/Lostee
          example: FindNUS
        Item_details:
          type: string
          example: Blue, with a sticker and broken handle
        Image_url:
          type: string
          format: string
          description: Item's accompanying image link
          example: https://imgur.com/gallery/RaHyECD
        User_id:
          type: string
          format: string
          description: UserID associated to this item. Only applicable for Lookout Items.
    MiniItem:
      type: object
      description: |
        A truncated form of Item meant for indexing and pagination. 
        Meant to populate frontend search 'cards'. Should come in an array.
      required:
      - Id
      - Name
      - Date
      - Location
      - Category
      properties:
        Id: 
          type: string
          format: string
          description: The MongoDB ObjectID associated to this Item
          example: 98721yrr0u14oure
        Name:
          type: string
          description: Name of lost/found item
          example: Water Bottle
        Date:
          type: string
          description: Date-time where item is lost/found
          format: date-time
        Location:
          type: string
          description: Where the item was found
          example: E4A DSA Lab
        Category:
          $ref: "#/components/schemas/Category"
          description: Type of item
          example: Cards
        Item_details:
          type: string
          example: Blue, with a sticker and broken handle
        Image_url:
          type: string
          format: string
          description: Item's accompanying image link
          example: https://imgur.com/gallery/RaHyECD     
    NewItem:
      type: object
      description: |
        An Item's schema for POST calls to the backend, for adding NEW items 
        NewItems have two states. They are either a LOST or FOUND item. 
        - LOST: Generated by Losters. Other than the required parameters, **a User_id is required** for Item association to the user.
        - FOUN: Generaterd by Finders. At a minimum, only the required parameters are necessary.
      required:
        - Name
        - Date
        - Location
        - Category
      properties:
        User_id:
          type: string
          description: Unique User_id generated by firebase to associate a user to a Lookout item.
        Name:
          type: string
          description: Name of new lost/found item
          example: Water Bottle
        Date:
          type: string
          description: Date-time where item is lost/found
          format: date-time
        Location:
          type: string
          description: Where the item was found
          example: E4A DSA Lab
        Category:
          $ref: "#/components/schemas/Category"
          description: Type of item
          example: Cards
        Contact_method:
          $ref: "#/components/schemas/ContactMethod"
          description: Founder/Lostee Contact Method
          example: Telegram
        Contact_details:
          type: string
          description: Contact details of Founder/Lostee
          example: FindNUS
        Item_details:
          type: string
          example: Blue, with a sticker and broken handle
        Image_base64:
          type: string
          description: Accompanying image of new Lost/Found item, if applicable
          format: byte
    DeleteItem:
      type: object
      description: |
        An Item's schema for DELETE delete calls to the backend.
      required:
        - Id
      properties:
       Id: 
          type: string
          format: string
          description: The MongoDB ObjectID associated to this Item
          example: 98721yrr0u14oure
    PatchItem:
      type: object
      description: |
        An Item's schema for PATCH calls to the backend, for updatng item details 
        NewItems have two states They are either a LOOKOUT or FOUND item. 
        - LOOKOUT: Generated by Losters. Other than the required parameters, a User_id is necessary for Item association to the user.
        - EXISTING: Generaterd by Finders. At a minimum, only the required parameters are necessary.
      required:
        - Id
      properties:
        Id: 
          type: string
          format: string
          description: The MongoDB ObjectID associated to this Item
          example: 98721yrr0u14oure
        User_id:
          type: string
          description: Unique User_id generated by firebase to associate a user to a Lookout item.
        Name:
          type: string
          description: Name of new lost/found item
          example: Water Bottle
        Date:
          type: string
          description: Date-time where item is lost/found
          format: date-time
        Location:
          type: string
          description: Where the item was found
          example: E4A DSA Lab
        Category:
          $ref: "#/components/schemas/Category"
          description: Type of item
          example: Cards
        Contact_method:
          $ref: "#/components/schemas/ContactMethod"
          description: Founder/Lostee Contact Method
          example: Telegram
        Contact_details:
          type: string
          description: Contact details of Founder/Lostee
          example: FindNUS
        Item_details:
          type: string
          example: Blue, with a sticker and broken handle
        Image_base64:
          type: string
          description: Updated image of Lost/Found item, if applicable
          format: byte
    Category:
      type: string
      enum:
        - Etc
        - Cards
        - Notes
        - Electronics
        - Bottles
      description: Non-case sensitive category name
    ContactMethod:
      type: string
      enum:
        - nus_security
        - telegram
        - whatsapp
        - wechat
        - line
        - phone_number
      description: Non-case sensitive contact method
  # Define security scheme (Firebase Token)
  securitySchemes:
    firebaseAuth:
      type: http
      scheme: bearer
